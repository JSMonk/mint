enum Maybe(value) {
  Just(value)
  Nothing
}

component Test {
  fun something (string : String) : String {
    string
  }

  fun render : Html {
    <div/>
  }
}

component Main {
  fun handleClick : Maybe(String) {
    test&.something&("asd")
  }

  fun render : Html {
    <div onClick={handleClick}>
      <Test as test/>
    </div>
  }
}
--------------------------------------------------------------------------------
class C extends _E {
  constructor(_0) {
    super();
    this._0 = _0;
    this.length = 1;
  }
};

class D extends _E {
  constructor() {
    super();
    this.length = 0;
  }
};

class A extends _C {
  a(b) {
    return b;
  }

  render() {
    return _h("div", {});
  }
};

A.displayName = "Test";

class B extends _C {
  get d() {
    return (this._test ? new C(this._test) : new D);
  }

  c() {
    return (() => {
      const _ = (() => {
        const _ = this.d;
        return _s(_,(_) => _.a);
      })();

      return _s(_,(_) => _(`asd`));
    })();
  }

  render() {
    return _h("div", {
      "onClick": (event => (this.c)(_normalizeEvent(event)))
    }, [
      _h(A, {
        ref: (instance) => { this._test = instance }
      })
    ]);
  }
};

B.displayName = "Main";
