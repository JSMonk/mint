enum Maybe(value) {
  Just(value)
  Nothing
}

component Test {
  fun render {
    <div as base/>
  }
}

component Main {
  fun render {
    <div onClick={() { test&.base }}>
      <Test as test/>
    </div>
  }
}
--------------------------------------------------------------------------------
class B extends _E {
  constructor(_0) {
    super();
    this._0 = _0;
    this.length = 1;
  }
};

class C extends _E {
  constructor() {
    super();
    this.length = 0;
  }
};

class A extends _C {
  get a() {
    return (this._base ? new B(this._base) : new C);
  }

  render() {
    return _h("div", {
      ref: (element) => { this._base = element }
    });
  }
};

A.displayName = "Test";

class D extends _C {
  get b() {
    return (this._test ? new B(this._test) : new C);
  }

  render() {
    return _h("div", {
      "onClick": (event => (() => {
        return (() => {
          const _ = this.b;
          return _s(_,(_) => _.a);
        })()
      })(_normalizeEvent(event)))
    }, [
      _h(A, {
        ref: (instance) => { this._test = instance }
      })
    ]);
  }
};

D.displayName = "Main";
